dnl -*- sql -*-

-- main table
-- the idea is to provide a short nickname per portfolio and
-- some longer description that could be used to associate
-- info used by external applications
CREATE TABLE IF NOT EXISTS N(aou_umpf_portfolio) (
	portfolio_id INTEGER PRIMARY KEY ASC ON_CONFLICT ROLLBACK AUTOINCREMENT,
	-- nickname used to identify this portfolio externally
	short TEXT(64) NOT NULL UNIQUE,
	-- description to elaborate on this pf
	description TEXT
) POST;

-- postbl is the map between a portfolio and its position table
-- dimen
CREATE TABLE IF NOT EXISTS N(aou_umpf_postbl) (
	postbl_id INTEGER PRIMARY KEY ASC ON_CONFLICT ROLLBACK AUTOINCREMENT,
	-- the actual table name, fully qualified
	tbl_name TEXT(64),
	-- description on why this table is there
	description TEXT,
	UNIQUE (N(tbl_name)) ON_CONFLICT ROLLBACK
) POST;

-- fact
CREATE TABLE IF NOT EXISTS N(aou_umpf_postbl_fact) (
	portfolio_id INTEGER NOT NULL PRIMARY KEY,
	postbl_id INTEGER NOT NULL,
	FOREIGN KEY (N(portfolio_id))
		REFERENCES N(aou_umpf_portfolio) (N(portfolio_id))
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (N(postbl_id))
		REFERENCES N(aou_umpf_postbl) (N(postbl_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

-- user is the map between a portfolio and its users
-- dimen
CREATE TABLE IF NOT EXISTS N(aou_umpf_user) (
	user_id INTEGER PRIMARY KEY ASC ON_CONFLICT ROLLBACK AUTOINCREMENT,
	-- unix user id
	short TEXT(64),
	UNIQUE (N(short)) ON_CONFLICT ROLLBACK
) POST;

-- fact
CREATE TABLE IF NOT EXISTS N(aou_umpf_user_fact) (
	portfolio_id INTEGER NOT NULL,
	user_id INTEGER NOT NULL,
	PRIMARY KEY (N(portfolio_id), N(user_id)),
	FOREIGN KEY (N(portfolio_id))
		REFERENCES N(aou_umpf_portfolio) (N(portfolio_id))
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (N(user_id))
		REFERENCES N(aou_umpf_user) (N(user_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

-- portfolio tags
-- now the idea is to regard portfolios as the git tags of
-- a chain of orders (commits)
CREATE TABLE IF NOT EXISTS N(aou_umpf_tag) (
	tag_id INTEGER PRIMARY KEY ASC ON_CONFLICT ROLLBACK AUTOINCREMENT,
	portfolio_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	-- this has got to be UTC
	-- COMMENT 'time stamp of snapshot of security positions'
	tag_stamp TIMESTAMP DEFAULT 0 NOT NULL ON_CONFLICT ROLLBACK,
	-- this is the time when this tag has been entered
	-- into the table, this is for logging purposes only
	-- UTC stamps preferred
	-- COMMENT 'time stamp of database entry of snapshot'
	log_stamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (N(portfolio_id))
		REFERENCES N(aou_umpf_portfolio) (N(portfolio_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

-- portfolio securities
-- this is just a table to allow to elaborate on the securities
-- captured inside portfolios a bit
-- it is the whole responsibility of the caller to make sense
-- of any of these, this table exists to avoid redundance among
-- portfolio tags and must not be confused with a comprehensive
-- security database
CREATE TABLE IF NOT EXISTS N(aou_umpf_security) (
	security_id INTEGER PRIMARY KEY ASC ON_CONFLICT ROLLBACK AUTOINCREMENT,
	-- portfolio id, this is to allow the same security nicks
	-- across portfolios
	portfolio_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	-- nickname used to identify this security externally
	short TEXT(64) NOT NULL ON_CONFLICT ROLLBACK,
	-- used to elaborate on the security if need be
	description TEXT,
	UNIQUE (N(portfolio_id), N(short)) ON_CONFLICT ROLLBACK,
	FOREIGN KEY (N(portfolio_id))
		REFERENCES N(aou_umpf_portfolio) (N(portfolio_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

-- portfolio positions
-- to actually capture whats inside a portfolio
-- securities are referenced from a different table and must
-- not be confused with a contract database
-- fact table
CREATE TABLE IF NOT EXISTS N(aou_umpf_position) (
	tag_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	security_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	long_qty DECIMAL(18,9),
	short_qty DECIMAL(18,9),
	PRIMARY KEY (N(tag_id), N(security_id)) ON_CONFLICT ROLLBACK,
	FOREIGN KEY (N(tag_id))
		REFERENCES N(aou_umpf_tag) (N(tag_id))
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (N(security_id))
		REFERENCES N(aou_umpf_security) (N(security_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

INSERT INTO N(aou_umpf_postbl) (N(tbl_name), N(description))
VALUES ('aou_umpf_position', 'ordinary portfolio positions');

-- portfolio double positions
-- like aou_umpf_position but for entries with double characteristics
-- fact table
CREATE TABLE IF NOT EXISTS N(aou_umpf_dposition) (
	tag_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	security_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	long_qty REAL,
	short_qty REAL,
	PRIMARY KEY (N(tag_id), N(security_id)) ON_CONFLICT ROLLBACK,
	FOREIGN KEY (N(tag_id))
		REFERENCES N(aou_umpf_tag) (N(tag_id))
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (N(security_id))
		REFERENCES N(aou_umpf_security) (N(security_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

INSERT INTO N(aou_umpf_postbl) (N(tbl_name), N(description))
VALUES ("aou_umpf_dposition", "tracker for two double values");

-- position groups
-- this can be used to group a bunch of security positions together
-- for instance to reflect counter positions and fee positions or
-- interest
-- dimension table
CREATE TABLE IF NOT EXISTS N(aou_umpf_posgrp) (
	posgrp_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	portfolio_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	-- used to elaborate on the security if need be
	description TEXT,
	PRIMARY KEY (N(posgrp_id)) ON_CONFLICT ROLLBACK,
	FOREIGN KEY (N(portfolio_id))
		REFERENCES N(aou_umpf_portfolio) (N(portfolio_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

-- fact table
CREATE TABLE IF NOT EXISTS N(aou_umpf_posgrp_fact) (
	posgrp_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	security_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	flavour TEXT(64),
	PRIMARY KEY (N(posgrp_id), N(security_id)) ON_CONFLICT ROLLBACK,
	FOREIGN KEY (N(posgrp_id))
		REFERENCES N(aou_umpf_posgrp) (N(posgrp_id))
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (N(security_id))
		REFERENCES N(aou_umpf_security) (N(security_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;
CREATE INDEX N(aou_umpf_posgrp_fact_flavour)
	ON N(aou_umpf_posgrp_fact) (N(flavour));

-- last portfolio
-- keeps track of the last tag in chronological order
CREATE TABLE IF NOT EXISTS N(aou_umpf_last) (
	portfolio_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	tag_id INTEGER NOT NULL ON_CONFLICT ROLLBACK,
	UNIQUE (N(portfolio_id), N(tag_id)) ON_CONFLICT ROLLBACK,
	FOREIGN KEY (N(portfolio_id))
		REFERENCES N(aou_umpf_portfolio) (N(portfolio_id))
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (N(tag_id))
		REFERENCES N(aou_umpf_tag) (N(tag_id))
		ON DELETE CASCADE ON UPDATE CASCADE
) POST;

-- install.sql.in ends here
