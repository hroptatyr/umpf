dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.64])
AC_INIT([pfd], m4_esyscmd([./git-version-gen]), [http://www.ga-group.nl])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([lib/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([lib/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for pfd and friends.
#### Copyright (C) 2011  Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign])

## initialise our cool message nest levels
SXE_INIT_MSG_LEVEL

## the build chain
AC_PROG_CC(["icc -static-intel" icc gcc cc])
AC_PROG_CC_C99
LT_INIT

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])

## event loop
SXE_CHECK_LIBEV

## database stuff ... does not belong here
AC_ARG_WITH([mysql], [
AS_HELP_STRING([--with-mysql], [Which mysql to use])], [], [])
dnl AC_ARG_WITH([pgsql], [
dnl AS_HELP_STRING([--with-pgsql], [Which postgres to use])], [], [])
dnl 
if test "$with_mysql" != "no"; then
	AC_PATH_PROG([MYSQL_CONFIG], [mysql_config], [:])
	MYSQL_CPPFLAGS=$(${MYSQL_CONFIG} --include)
	MYSQL_LDFLAGS=$(${MYSQL_CONFIG} --libs)
	AC_SUBST([MYSQL_CPPFLAGS])
	AC_SUBST([MYSQL_LDFLAGS])
	if test "${MYSQL_CONFIG}" != ":"; then
		AC_DEFINE([HAVE_MYSQL], [1], [Defined when mysql could be found])
	fi
	AC_DEFINE([WITH_MYSQL], [1], [Defined when mysql was desired])

	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${MYSQL_CPPFLAGS}"
	AC_CHECK_HEADERS([mysql/mysql.h mysql.h])
	SXE_RESTORE_LIBS
fi
AM_CONDITIONAL([USE_MYSQL], [test "$with_mysql" != "no" -a "${MYSQL_CONFIG}" != ":"])

## check for libxml to process fixml
PKG_CHECK_MODULES([LIBXML2], [libxml-2.0 >= 2.7])
AM_CONDITIONAL([USE_LIBXML2], [test -n "${LIBXML2_LIBS}"])
## check for lua
PKG_CHECK_MODULES([LUA], [lua >= 5.1.0], [:], [:])
AM_CONDITIONAL([HAVE_LUA], [test -n "${LUA_LIBS}"])
## check for unserding
PKG_CHECK_MODULES([unserding], [unserding >= 0.1.1])

## just so we know what to build
AC_ARG_ENABLE([server], [
AS_HELP_STRING([--enable-server], [Build the server component, default: no.])],
	[enable_server="${enableval}"], [enable_server="no"])
AM_CONDITIONAL([BUILD_SERVER], [test "${enable_server}" = "yes"])
AC_ARG_ENABLE([cliapps], [
AS_HELP_STRING([--enable-client], [Build the client apps, default: yes.])],
	[enable_cliapps="${enableval}"], [enable_cliapps="yes"])
AM_CONDITIONAL([BUILD_CLIAPPS], [test "${enable_cliapps}" = "yes"])
AM_CONDITIONAL([BUILD_LIBRARY], [test "yes" = "yes"])

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([cli/Makefile])
AC_CONFIG_FILES([lib/Makefile])
AC_CONFIG_FILES([srv/Makefile])
AC_CONFIG_FILES([libpfd.pc])
AC_OUTPUT

echo
echo
echo "Build summary"
echo "============="
echo
echo "Build server: ${BUILD_SERVER_FALSE:+yes}"
echo "Build cliapps: ${BUILD_CLIAPPS_FALSE:+yes}"
echo "Build library: ${BUILD_LIBRARY_FALSE:+yes}"
echo "Scripting engine: ${HAVE_LUA_FALSE:+lua}"
echo "DBMS: ${USE_MYSQL_FALSE:+mysql}"
echo "XML: ${USE_LIBXML2_FALSE:+libxml2}"
echo

dnl configure.ac ends here
